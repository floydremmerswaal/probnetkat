-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Probnetkat/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExp -> Exp                                 (0)
	Ident -> L_Ident                                   (1)
	Double -> L_doubl                                  (2)
	Integer -> L_integ                                 (3)
	Exp3 -> Ident '<-' Integer                         (4)
	Exp3 -> Ident '=' Integer                          (5)
	Exp3 -> 'dup'                                      (6)
	Exp3 -> 'skip'                                     (7)
	Exp3 -> 'drop'                                     (8)
	Exp3 -> '(' Exp ')'                                (9)
	Exp2 -> Exp2 ';' Exp3                              (10)
	Exp2 -> Exp3                                       (11)
	Exp1 -> Exp1 '+[' Double ']' Exp2                  (12)
	Exp1 -> Exp2                                       (13)
	Exp -> Exp '&' Exp1                                (14)
	Exp -> Exp1                                        (15)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'&'            { PT _ (TS _ 1) }
	'('            { PT _ (TS _ 2) }
	')'            { PT _ (TS _ 3) }
	'+['           { PT _ (TS _ 4) }
	';'            { PT _ (TS _ 5) }
	'<-'           { PT _ (TS _ 6) }
	'='            { PT _ (TS _ 7) }
	']'            { PT _ (TS _ 8) }
	'drop'         { PT _ (TS _ 9) }
	'dup'          { PT _ (TS _ 10) }
	'skip'         { PT _ (TS _ 11) }
	L_Ident        { PT _ (TV $$) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExp     rule  0
	Ident           rule  1
	Double          rule  2
	Integer         rule  3
	Exp3            rules 4, 5, 6, 7, 8, 9
	Exp2            rules 10, 11
	Exp1            rules 12, 13
	Exp             rules 14, 15

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pExp -> . Exp                                (rule 0)

	'('            shift, and enter state 8
	'drop'         shift, and enter state 9
	'dup'          shift, and enter state 10
	'skip'         shift, and enter state 11
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Exp3           goto state 4
	Exp2           goto state 5
	Exp1           goto state 6
	Exp            goto state 7

State 1

	Ident -> . L_Ident                                  (rule 1)

	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'<-'           reduce using rule 1
	'='            reduce using rule 1


State 3

	Exp3 -> Ident . '<-' Integer                        (rule 4)
	Exp3 -> Ident . '=' Integer                         (rule 5)

	'<-'           shift, and enter state 16
	'='            shift, and enter state 17


State 4

	Exp2 -> Exp3 .                                      (rule 11)

	'&'            reduce using rule 11
	')'            reduce using rule 11
	'+['           reduce using rule 11
	';'            reduce using rule 11
	%eof           reduce using rule 11


State 5

	Exp2 -> Exp2 . ';' Exp3                             (rule 10)
	Exp1 -> Exp2 .                                      (rule 13)

	'&'            reduce using rule 13
	')'            reduce using rule 13
	'+['           reduce using rule 13
	';'            shift, and enter state 15
	%eof           reduce using rule 13


State 6

	Exp1 -> Exp1 . '+[' Double ']' Exp2                 (rule 12)
	Exp -> Exp1 .                                       (rule 15)

	'&'            reduce using rule 15
	')'            reduce using rule 15
	'+['           shift, and enter state 14
	%eof           reduce using rule 15


State 7

	%start_pExp -> Exp .                                (rule 0)
	Exp -> Exp . '&' Exp1                               (rule 14)

	'&'            shift, and enter state 13
	%eof           accept


State 8

	Exp3 -> '(' . Exp ')'                               (rule 9)

	'('            shift, and enter state 8
	'drop'         shift, and enter state 9
	'dup'          shift, and enter state 10
	'skip'         shift, and enter state 11
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Exp3           goto state 4
	Exp2           goto state 5
	Exp1           goto state 6
	Exp            goto state 12

State 9

	Exp3 -> 'drop' .                                    (rule 8)

	'&'            reduce using rule 8
	')'            reduce using rule 8
	'+['           reduce using rule 8
	';'            reduce using rule 8
	%eof           reduce using rule 8


State 10

	Exp3 -> 'dup' .                                     (rule 6)

	'&'            reduce using rule 6
	')'            reduce using rule 6
	'+['           reduce using rule 6
	';'            reduce using rule 6
	%eof           reduce using rule 6


State 11

	Exp3 -> 'skip' .                                    (rule 7)

	'&'            reduce using rule 7
	')'            reduce using rule 7
	'+['           reduce using rule 7
	';'            reduce using rule 7
	%eof           reduce using rule 7


State 12

	Exp3 -> '(' Exp . ')'                               (rule 9)
	Exp -> Exp . '&' Exp1                               (rule 14)

	'&'            shift, and enter state 13
	')'            shift, and enter state 25


State 13

	Exp -> Exp '&' . Exp1                               (rule 14)

	'('            shift, and enter state 8
	'drop'         shift, and enter state 9
	'dup'          shift, and enter state 10
	'skip'         shift, and enter state 11
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Exp3           goto state 4
	Exp2           goto state 5
	Exp1           goto state 24

State 14

	Exp1 -> Exp1 '+[' . Double ']' Exp2                 (rule 12)

	L_doubl        shift, and enter state 23

	Double         goto state 22

State 15

	Exp2 -> Exp2 ';' . Exp3                             (rule 10)

	'('            shift, and enter state 8
	'drop'         shift, and enter state 9
	'dup'          shift, and enter state 10
	'skip'         shift, and enter state 11
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Exp3           goto state 21

State 16

	Exp3 -> Ident '<-' . Integer                        (rule 4)

	L_integ        shift, and enter state 19

	Integer        goto state 20

State 17

	Exp3 -> Ident '=' . Integer                         (rule 5)

	L_integ        shift, and enter state 19

	Integer        goto state 18

State 18

	Exp3 -> Ident '=' Integer .                         (rule 5)

	'&'            reduce using rule 5
	')'            reduce using rule 5
	'+['           reduce using rule 5
	';'            reduce using rule 5
	%eof           reduce using rule 5


State 19

	Integer -> L_integ .                                (rule 3)

	'&'            reduce using rule 3
	')'            reduce using rule 3
	'+['           reduce using rule 3
	';'            reduce using rule 3
	%eof           reduce using rule 3


State 20

	Exp3 -> Ident '<-' Integer .                        (rule 4)

	'&'            reduce using rule 4
	')'            reduce using rule 4
	'+['           reduce using rule 4
	';'            reduce using rule 4
	%eof           reduce using rule 4


State 21

	Exp2 -> Exp2 ';' Exp3 .                             (rule 10)

	'&'            reduce using rule 10
	')'            reduce using rule 10
	'+['           reduce using rule 10
	';'            reduce using rule 10
	%eof           reduce using rule 10


State 22

	Exp1 -> Exp1 '+[' Double . ']' Exp2                 (rule 12)

	']'            shift, and enter state 26


State 23

	Double -> L_doubl .                                 (rule 2)

	']'            reduce using rule 2


State 24

	Exp1 -> Exp1 . '+[' Double ']' Exp2                 (rule 12)
	Exp -> Exp '&' Exp1 .                               (rule 14)

	'&'            reduce using rule 14
	')'            reduce using rule 14
	'+['           shift, and enter state 14
	%eof           reduce using rule 14


State 25

	Exp3 -> '(' Exp ')' .                               (rule 9)

	'&'            reduce using rule 9
	')'            reduce using rule 9
	'+['           reduce using rule 9
	';'            reduce using rule 9
	%eof           reduce using rule 9


State 26

	Exp1 -> Exp1 '+[' Double ']' . Exp2                 (rule 12)

	'('            shift, and enter state 8
	'drop'         shift, and enter state 9
	'dup'          shift, and enter state 10
	'skip'         shift, and enter state 11
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Exp3           goto state 4
	Exp2           goto state 27

State 27

	Exp2 -> Exp2 . ';' Exp3                             (rule 10)
	Exp1 -> Exp1 '+[' Double ']' Exp2 .                 (rule 12)

	'&'            reduce using rule 12
	')'            reduce using rule 12
	'+['           reduce using rule 12
	';'            shift, and enter state 15
	%eof           reduce using rule 12


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 16
Number of terminals: 14
Number of non-terminals: 8
Number of states: 28
