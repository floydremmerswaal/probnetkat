-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Probnetkat/Par.y
-----------------------------------------------------------------------------

state 15 contains 3 shift/reduce conflicts.
state 16 contains 3 shift/reduce conflicts.
state 17 contains 3 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExp1 -> Exp1                               (0)
	%start_pExp -> Exp                                 (1)
	Ident -> L_Ident                                   (2)
	Integer -> L_integ                                 (3)
	Exp1 -> Ident '<-' Integer                         (4)
	Exp1 -> Ident '=' Integer                          (5)
	Exp1 -> 'dup'                                      (6)
	Exp1 -> 'skip'                                     (7)
	Exp1 -> 'drop'                                     (8)
	Exp -> Exp '+' Exp                                 (9)
	Exp -> Exp ';' Exp                                 (10)
	Exp -> Exp '&' Exp                                 (11)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'&'            { PT _ (TS _ 1) }
	'+'            { PT _ (TS _ 2) }
	';'            { PT _ (TS _ 3) }
	'<-'           { PT _ (TS _ 4) }
	'='            { PT _ (TS _ 5) }
	'drop'         { PT _ (TS _ 6) }
	'dup'          { PT _ (TS _ 7) }
	'skip'         { PT _ (TS _ 8) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExp1    rule  0
	%start_pExp     rule  1
	Ident           rule  2
	Integer         rule  3
	Exp1            rules 4, 5, 6, 7, 8
	Exp             rules 9, 10, 11

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pExp1 -> . Exp1                              (rule 0)

	'drop'         shift, and enter state 7
	'dup'          shift, and enter state 8
	'skip'         shift, and enter state 9
	L_Ident        shift, and enter state 3

	Ident          goto state 5
	Exp1           goto state 6

State 1

	%start_pExp -> . Exp                                (rule 1)


	Exp            goto state 4

State 2

	Ident -> . L_Ident                                  (rule 2)

	L_Ident        shift, and enter state 3


State 3

	Ident -> L_Ident .                                  (rule 2)

	'<-'           reduce using rule 2
	'='            reduce using rule 2


State 4

	%start_pExp -> Exp .                                (rule 1)
	Exp -> Exp . '+' Exp                                (rule 9)
	Exp -> Exp . ';' Exp                                (rule 10)
	Exp -> Exp . '&' Exp                                (rule 11)

	'&'            shift, and enter state 12
	'+'            shift, and enter state 13
	';'            shift, and enter state 14
	%eof           accept


State 5

	Exp1 -> Ident . '<-' Integer                        (rule 4)
	Exp1 -> Ident . '=' Integer                         (rule 5)

	'<-'           shift, and enter state 10
	'='            shift, and enter state 11


State 6

	%start_pExp1 -> Exp1 .                              (rule 0)

	%eof           accept


State 7

	Exp1 -> 'drop' .                                    (rule 8)

	%eof           reduce using rule 8


State 8

	Exp1 -> 'dup' .                                     (rule 6)

	%eof           reduce using rule 6


State 9

	Exp1 -> 'skip' .                                    (rule 7)

	%eof           reduce using rule 7


State 10

	Exp1 -> Ident '<-' . Integer                        (rule 4)

	L_integ        shift, and enter state 19

	Integer        goto state 20

State 11

	Exp1 -> Ident '=' . Integer                         (rule 5)

	L_integ        shift, and enter state 19

	Integer        goto state 18

State 12

	Exp -> Exp '&' . Exp                                (rule 11)


	Exp            goto state 17

State 13

	Exp -> Exp '+' . Exp                                (rule 9)


	Exp            goto state 16

State 14

	Exp -> Exp ';' . Exp                                (rule 10)


	Exp            goto state 15

State 15

	Exp -> Exp . '+' Exp                                (rule 9)
	Exp -> Exp . ';' Exp                                (rule 10)
	Exp -> Exp ';' Exp .                                (rule 10)
	Exp -> Exp . '&' Exp                                (rule 11)

	'&'            shift, and enter state 12
			(reduce using rule 10)

	'+'            shift, and enter state 13
			(reduce using rule 10)

	';'            shift, and enter state 14
			(reduce using rule 10)

	%eof           reduce using rule 10


State 16

	Exp -> Exp . '+' Exp                                (rule 9)
	Exp -> Exp '+' Exp .                                (rule 9)
	Exp -> Exp . ';' Exp                                (rule 10)
	Exp -> Exp . '&' Exp                                (rule 11)

	'&'            shift, and enter state 12
			(reduce using rule 9)

	'+'            shift, and enter state 13
			(reduce using rule 9)

	';'            shift, and enter state 14
			(reduce using rule 9)

	%eof           reduce using rule 9


State 17

	Exp -> Exp . '+' Exp                                (rule 9)
	Exp -> Exp . ';' Exp                                (rule 10)
	Exp -> Exp . '&' Exp                                (rule 11)
	Exp -> Exp '&' Exp .                                (rule 11)

	'&'            shift, and enter state 12
			(reduce using rule 11)

	'+'            shift, and enter state 13
			(reduce using rule 11)

	';'            shift, and enter state 14
			(reduce using rule 11)

	%eof           reduce using rule 11


State 18

	Exp1 -> Ident '=' Integer .                         (rule 5)

	%eof           reduce using rule 5


State 19

	Integer -> L_integ .                                (rule 3)

	%eof           reduce using rule 3


State 20

	Exp1 -> Ident '<-' Integer .                        (rule 4)

	%eof           reduce using rule 4


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 12
Number of terminals: 10
Number of non-terminals: 6
Number of states: 21
