-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Syntax/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pExp -> Exp                                 (0)
	Double -> L_doubl                                  (1)
	Integer -> L_integ                                 (2)
	Exp3 -> 'sw' '<-' Integer                          (3)
	Exp3 -> 'pt' '<-' Integer                          (4)
	Exp3 -> 'sw' '=' Integer                           (5)
	Exp3 -> 'pt' '=' Integer                           (6)
	Exp3 -> 'dup'                                      (7)
	Exp3 -> 'skip'                                     (8)
	Exp3 -> 'drop'                                     (9)
	Exp3 -> '(' Exp ')'                                (10)
	Exp2 -> Exp2 ';' Exp3                              (11)
	Exp2 -> Exp3                                       (12)
	Exp1 -> Exp1 '+' Exp2                              (13)
	Exp1 -> Exp1 '+[' Double ']' Exp2                  (14)
	Exp1 -> Exp2                                       (15)
	Exp -> Exp '&' Exp1                                (16)
	Exp -> Exp '*'                                     (17)
	Exp -> Exp1                                        (18)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'&'            { PT _ (TS _ 1) }
	'('            { PT _ (TS _ 2) }
	')'            { PT _ (TS _ 3) }
	'*'            { PT _ (TS _ 4) }
	'+'            { PT _ (TS _ 5) }
	'+['           { PT _ (TS _ 6) }
	';'            { PT _ (TS _ 7) }
	'<-'           { PT _ (TS _ 8) }
	'='            { PT _ (TS _ 9) }
	']'            { PT _ (TS _ 10) }
	'drop'         { PT _ (TS _ 11) }
	'dup'          { PT _ (TS _ 12) }
	'pt'           { PT _ (TS _ 13) }
	'skip'         { PT _ (TS _ 14) }
	'sw'           { PT _ (TS _ 15) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pExp     rule  0
	Double          rule  1
	Integer         rule  2
	Exp3            rules 3, 4, 5, 6, 7, 8, 9, 10
	Exp2            rules 11, 12
	Exp1            rules 13, 14, 15
	Exp             rules 16, 17, 18

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pExp -> . Exp                                (rule 0)

	'('            shift, and enter state 7
	'drop'         shift, and enter state 8
	'dup'          shift, and enter state 9
	'pt'           shift, and enter state 10
	'skip'         shift, and enter state 11
	'sw'           shift, and enter state 12

	Exp3           goto state 3
	Exp2           goto state 4
	Exp1           goto state 5
	Exp            goto state 6

State 1

	Double -> . L_doubl                                 (rule 1)

	L_doubl        shift, and enter state 2


State 2

	Double -> L_doubl .                                 (rule 1)

	']'            reduce using rule 1


State 3

	Exp2 -> Exp3 .                                      (rule 12)

	'&'            reduce using rule 12
	')'            reduce using rule 12
	'*'            reduce using rule 12
	'+'            reduce using rule 12
	'+['           reduce using rule 12
	';'            reduce using rule 12
	%eof           reduce using rule 12


State 4

	Exp2 -> Exp2 . ';' Exp3                             (rule 11)
	Exp1 -> Exp2 .                                      (rule 15)

	'&'            reduce using rule 15
	')'            reduce using rule 15
	'*'            reduce using rule 15
	'+'            reduce using rule 15
	'+['           reduce using rule 15
	';'            shift, and enter state 22
	%eof           reduce using rule 15


State 5

	Exp1 -> Exp1 . '+' Exp2                             (rule 13)
	Exp1 -> Exp1 . '+[' Double ']' Exp2                 (rule 14)
	Exp -> Exp1 .                                       (rule 18)

	'&'            reduce using rule 18
	')'            reduce using rule 18
	'*'            reduce using rule 18
	'+'            shift, and enter state 20
	'+['           shift, and enter state 21
	%eof           reduce using rule 18


State 6

	%start_pExp -> Exp .                                (rule 0)
	Exp -> Exp . '&' Exp1                               (rule 16)
	Exp -> Exp . '*'                                    (rule 17)

	'&'            shift, and enter state 18
	'*'            shift, and enter state 19
	%eof           accept


State 7

	Exp3 -> '(' . Exp ')'                               (rule 10)

	'('            shift, and enter state 7
	'drop'         shift, and enter state 8
	'dup'          shift, and enter state 9
	'pt'           shift, and enter state 10
	'skip'         shift, and enter state 11
	'sw'           shift, and enter state 12

	Exp3           goto state 3
	Exp2           goto state 4
	Exp1           goto state 5
	Exp            goto state 17

State 8

	Exp3 -> 'drop' .                                    (rule 9)

	'&'            reduce using rule 9
	')'            reduce using rule 9
	'*'            reduce using rule 9
	'+'            reduce using rule 9
	'+['           reduce using rule 9
	';'            reduce using rule 9
	%eof           reduce using rule 9


State 9

	Exp3 -> 'dup' .                                     (rule 7)

	'&'            reduce using rule 7
	')'            reduce using rule 7
	'*'            reduce using rule 7
	'+'            reduce using rule 7
	'+['           reduce using rule 7
	';'            reduce using rule 7
	%eof           reduce using rule 7


State 10

	Exp3 -> 'pt' . '<-' Integer                         (rule 4)
	Exp3 -> 'pt' . '=' Integer                          (rule 6)

	'<-'           shift, and enter state 15
	'='            shift, and enter state 16


State 11

	Exp3 -> 'skip' .                                    (rule 8)

	'&'            reduce using rule 8
	')'            reduce using rule 8
	'*'            reduce using rule 8
	'+'            reduce using rule 8
	'+['           reduce using rule 8
	';'            reduce using rule 8
	%eof           reduce using rule 8


State 12

	Exp3 -> 'sw' . '<-' Integer                         (rule 3)
	Exp3 -> 'sw' . '=' Integer                          (rule 5)

	'<-'           shift, and enter state 13
	'='            shift, and enter state 14


State 13

	Exp3 -> 'sw' '<-' . Integer                         (rule 3)

	L_integ        shift, and enter state 29

	Integer        goto state 32

State 14

	Exp3 -> 'sw' '=' . Integer                          (rule 5)

	L_integ        shift, and enter state 29

	Integer        goto state 31

State 15

	Exp3 -> 'pt' '<-' . Integer                         (rule 4)

	L_integ        shift, and enter state 29

	Integer        goto state 30

State 16

	Exp3 -> 'pt' '=' . Integer                          (rule 6)

	L_integ        shift, and enter state 29

	Integer        goto state 28

State 17

	Exp3 -> '(' Exp . ')'                               (rule 10)
	Exp -> Exp . '&' Exp1                               (rule 16)
	Exp -> Exp . '*'                                    (rule 17)

	'&'            shift, and enter state 18
	')'            shift, and enter state 27
	'*'            shift, and enter state 19


State 18

	Exp -> Exp '&' . Exp1                               (rule 16)

	'('            shift, and enter state 7
	'drop'         shift, and enter state 8
	'dup'          shift, and enter state 9
	'pt'           shift, and enter state 10
	'skip'         shift, and enter state 11
	'sw'           shift, and enter state 12

	Exp3           goto state 3
	Exp2           goto state 4
	Exp1           goto state 26

State 19

	Exp -> Exp '*' .                                    (rule 17)

	'&'            reduce using rule 17
	')'            reduce using rule 17
	'*'            reduce using rule 17
	%eof           reduce using rule 17


State 20

	Exp1 -> Exp1 '+' . Exp2                             (rule 13)

	'('            shift, and enter state 7
	'drop'         shift, and enter state 8
	'dup'          shift, and enter state 9
	'pt'           shift, and enter state 10
	'skip'         shift, and enter state 11
	'sw'           shift, and enter state 12

	Exp3           goto state 3
	Exp2           goto state 25

State 21

	Exp1 -> Exp1 '+[' . Double ']' Exp2                 (rule 14)

	L_doubl        shift, and enter state 2

	Double         goto state 24

State 22

	Exp2 -> Exp2 ';' . Exp3                             (rule 11)

	'('            shift, and enter state 7
	'drop'         shift, and enter state 8
	'dup'          shift, and enter state 9
	'pt'           shift, and enter state 10
	'skip'         shift, and enter state 11
	'sw'           shift, and enter state 12

	Exp3           goto state 23

State 23

	Exp2 -> Exp2 ';' Exp3 .                             (rule 11)

	'&'            reduce using rule 11
	')'            reduce using rule 11
	'*'            reduce using rule 11
	'+'            reduce using rule 11
	'+['           reduce using rule 11
	';'            reduce using rule 11
	%eof           reduce using rule 11


State 24

	Exp1 -> Exp1 '+[' Double . ']' Exp2                 (rule 14)

	']'            shift, and enter state 33


State 25

	Exp2 -> Exp2 . ';' Exp3                             (rule 11)
	Exp1 -> Exp1 '+' Exp2 .                             (rule 13)

	'&'            reduce using rule 13
	')'            reduce using rule 13
	'*'            reduce using rule 13
	'+'            reduce using rule 13
	'+['           reduce using rule 13
	';'            shift, and enter state 22
	%eof           reduce using rule 13


State 26

	Exp1 -> Exp1 . '+' Exp2                             (rule 13)
	Exp1 -> Exp1 . '+[' Double ']' Exp2                 (rule 14)
	Exp -> Exp '&' Exp1 .                               (rule 16)

	'&'            reduce using rule 16
	')'            reduce using rule 16
	'*'            reduce using rule 16
	'+'            shift, and enter state 20
	'+['           shift, and enter state 21
	%eof           reduce using rule 16


State 27

	Exp3 -> '(' Exp ')' .                               (rule 10)

	'&'            reduce using rule 10
	')'            reduce using rule 10
	'*'            reduce using rule 10
	'+'            reduce using rule 10
	'+['           reduce using rule 10
	';'            reduce using rule 10
	%eof           reduce using rule 10


State 28

	Exp3 -> 'pt' '=' Integer .                          (rule 6)

	'&'            reduce using rule 6
	')'            reduce using rule 6
	'*'            reduce using rule 6
	'+'            reduce using rule 6
	'+['           reduce using rule 6
	';'            reduce using rule 6
	%eof           reduce using rule 6


State 29

	Integer -> L_integ .                                (rule 2)

	'&'            reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	'+['           reduce using rule 2
	';'            reduce using rule 2
	%eof           reduce using rule 2


State 30

	Exp3 -> 'pt' '<-' Integer .                         (rule 4)

	'&'            reduce using rule 4
	')'            reduce using rule 4
	'*'            reduce using rule 4
	'+'            reduce using rule 4
	'+['           reduce using rule 4
	';'            reduce using rule 4
	%eof           reduce using rule 4


State 31

	Exp3 -> 'sw' '=' Integer .                          (rule 5)

	'&'            reduce using rule 5
	')'            reduce using rule 5
	'*'            reduce using rule 5
	'+'            reduce using rule 5
	'+['           reduce using rule 5
	';'            reduce using rule 5
	%eof           reduce using rule 5


State 32

	Exp3 -> 'sw' '<-' Integer .                         (rule 3)

	'&'            reduce using rule 3
	')'            reduce using rule 3
	'*'            reduce using rule 3
	'+'            reduce using rule 3
	'+['           reduce using rule 3
	';'            reduce using rule 3
	%eof           reduce using rule 3


State 33

	Exp1 -> Exp1 '+[' Double ']' . Exp2                 (rule 14)

	'('            shift, and enter state 7
	'drop'         shift, and enter state 8
	'dup'          shift, and enter state 9
	'pt'           shift, and enter state 10
	'skip'         shift, and enter state 11
	'sw'           shift, and enter state 12

	Exp3           goto state 3
	Exp2           goto state 34

State 34

	Exp2 -> Exp2 . ';' Exp3                             (rule 11)
	Exp1 -> Exp1 '+[' Double ']' Exp2 .                 (rule 14)

	'&'            reduce using rule 14
	')'            reduce using rule 14
	'*'            reduce using rule 14
	'+'            reduce using rule 14
	'+['           reduce using rule 14
	';'            shift, and enter state 22
	%eof           reduce using rule 14


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 19
Number of terminals: 17
Number of non-terminals: 7
Number of states: 35
