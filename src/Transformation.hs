-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Transformation (transExp) where

import Prelude hiding (drop, seq)
import Syntax.Abs

import Control.Monad.Bayes.Class

import Control.Arrow
import Semantics
    ( kleene,
      par,
      prob,
      seq,
      drop,
      skip,
      dup,
      testPt,
      testSw,
      assignPt,
      assignSw,
      SH ) 

transExp :: MonadDistribution m => Exp -> Kleisli m SH SH
transExp x = case x of
  EDup                      -> dup
  ESkip                     -> skip
  EDrop                     -> drop
  EAssSw  integer           -> assignSw integer
  EAssPt  integer           -> assignPt integer
  ESwEq   integer           -> testSw integer
  EPtEq   integer           -> testPt integer
  EKleene exp1              -> kleene (transExp exp1)
  ESeq    exp1 exp2         -> seq (transExp exp1) (transExp exp2)
  EPar    exp1 exp2         -> par (transExp exp1) (transExp exp2)
  EProbD  exp1 exp2         -> prob 0.5 (transExp exp1) (transExp exp2)
  EProb   exp1 double exp2  -> prob double (transExp exp1)  (transExp exp2)